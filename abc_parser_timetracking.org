#+TITLE: ABC Parser Project Time Tracking
#+AUTHOR: Antoine
#+DATE: March 21, 2025

* Project Overview
This file tracks time spent on tasks for the ABC Parser project, which is a full-fledged parser based on ABC's 2.2 standard.

* Tasks Table
#+NAME: tasks
| Feature      | Task                                                | Orig. Estimate | Cur. Estimate | Spent | Remaining | Velocity |
|--------------+-----------------------------------------------------+----------------+---------------+-------+-----------+----------|
| IDE Features | Mark incomplete bars with a warning                 |            2.5 |           2.5 |   0.0 |       2.5 |     0.00 |
| Formatter    | Group tuplets as beams in rules resolution          |            4.0 |           4.0 |   0.0 |       4.0 |     0.00 |
| Scanner      | Handle directive followed by X:<number> as new tune |            3.0 |           3.0 |   0.0 |       3.0 |     0.00 |
| Parser       | Remove regex matching from tuplet parsing           |            2.0 |           2.0 |   1.0 |       1.0 |     2.00 |
| scanner      | include info lines in scan2 pbt roundtrip           |            2.0 |           2.0 |   2.0 |       0.0 |     1.00 |
| parser       | setup PBT tests                                     |            4.0 |           4.0 |   0.0 |       4.0 |     0.00 |
| Parser       | Add new source of error reporting                   |            4.5 |           4.5 |   0.0 |       4.5 |     0.00 |
|--------------+-----------------------------------------------------+----------------+---------------+-------+-----------+----------|
| TOTAL        |                                                     |           22.0 |          22.0 |   3.0 |      19.0 |     7.33 |
#+TBLFM: @>$3=vsum(@2..@-1);%.1f::@>$4=vsum(@2..@-1);%.1f::@>$5=vsum(@2..@-1);%.1f::@>$6=vsum(@2..@-1);%.1f::$6=$4-$5;%.1f::$7=if($5>0, $4/$5, "N/A");%.2f::@>$7=if(@>$5>0, @>$4/@>$5, "N/A");%.2f

* How to Use This File

1. Update the "Spent" column as you work on tasks
2. Press =C-c C-c= on the =#+TBLFM:= line to recalculate totals
3. The "Remaining" column will automatically update based on current estimate and time spent

* Understanding Velocity

Velocity is a measure of efficiency calculated as:
#+BEGIN_EXAMPLE
Velocity = Current Estimate / Time Spent
#+END_EXAMPLE

- A velocity of 1.0 means you're progressing exactly as estimated
- A velocity > 1.0 means you're progressing faster than estimated
- A velocity < 1.0 means you're progressing slower than estimated

For example:
- If a task has a current estimate of 4 hours and you've spent 2 hours, the velocity is 2.0 (twice as fast as estimated)
- If a task has a current estimate of 3 hours and you've spent 6 hours, the velocity is 0.5 (half as fast as estimated)

The "Average Velocity" in the summary section shows the overall project velocity.

* Additional Calculations

#+NAME: summary
| Metric                | Value  |
|-----------------------+--------|
| Total Original Est.   | #ERROR |
| Total Current Est.    | #ERROR |
| Total Time Spent      | #ERROR |
| Total Remaining       | #ERROR |
| Completion Percentage | #ERROR |
| Average Velocity      | #ERROR |
#+TBLFM: @2$2='(format "%.1f" (org-sbe "tasks" (row 12) (col 3)));N::@3$2='(format "%.1f" (org-sbe "tasks" (row 12) (col 4)));N::@4$2='(format "%.1f" (org-sbe "tasks" (row 12) (col 5)));N::@5$2='(format "%.1f" (org-sbe "tasks" (row 12) (col 6)));N::@6$2='(format "%.1f%%" (* 100 (/ (org-sbe "tasks" (row 12) (col 5)) (org-sbe "tasks" (row 12) (col 4)))));N::@7$2='(if (> (org-sbe "tasks" (row 12) (col 5)) 0.0) (format "%.2f" (/ (org-sbe "tasks" (row 12) (col 4)) (org-sbe "tasks" (row 12) (col 5)))) "N/A")

* Progress Chart
#+BEGIN_SRC elisp :var data=summary :results output raw :file time_track/progress.txt
(unless (file-directory-p "time_track")
  (make-directory "time_track" t))

(princ "#+BEGIN_EXAMPLE\n")
(let* ((total (string-to-number (nth 1 (nth 2 data))))
       (spent (string-to-number (nth 1 (nth 3 data))))
       (percent (if (> total 0) (/ spent total) 0))
       (width 50)
       (filled (round (* width percent)))
       (empty (- width filled)))
  (princ "Progress: [")
  (princ (make-string filled ?#))
  (princ (make-string empty ?-))
  (princ (format "] %.1f%%\n" (* percent 100))))
(princ "#+END_EXAMPLE")

;; Also save to file for external use
(with-temp-file "time_track/progress.txt"
  (let* ((total (string-to-number (nth 1 (nth 2 data))))
         (spent (string-to-number (nth 1 (nth 3 data))))
         (percent (if (> total 0) (/ spent total) 0)))
    (insert (format "Project Progress: %.1f%% complete\n" (* percent 100)))))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Progress: [--------------------------------------------------] 0.0%
#+END_EXAMPLE

* Monte Carlo Project Completion Simulation

This simulation runs 100 scenarios with random task velocities between 0.1 and 0.9 to estimate project completion dates.

** Simulation Parameters
- Work capacity: 2.5 hours per day
- Work schedule: 6 days per week
- Starting date: 2025-03-21
- Total original estimate: 30.0 hours
- Number of scenarios: 100

** Completion Date Percentiles
#+NAME: completion_percentiles
#+BEGIN_SRC elisp :results output
(require 'cl-lib)  ;; Load Common Lisp compatibility library

(let* ((tasks '((2.5) (4.0) (1.5) (3.0) (3.5) (2.0) (2.5) (1.5) (3.0) (2.0) (4.5)))
       (scenarios (make-vector 100 0))
       (today (encode-time 0 0 0 21 3 2025))  ; March 21, 2025
       (hours-per-day 2.5)
       (days-per-week 6)
       (results '())
       (debug-info '())
       ;; Calculate original estimate completion date
       (total-orig-estimate 30.0)
       (orig-work-days (ceiling (/ total-orig-estimate hours-per-day)))
       (orig-full-weeks (/ orig-work-days days-per-week))
       (orig-remaining-work-days (% orig-work-days days-per-week))
       (orig-weekend-days (* orig-full-weeks 2))
       (orig-total-days (+ orig-work-days orig-weekend-days))
       (orig-completion-date (time-add today (days-to-time orig-total-days))))
  
  ;; Generate 100 scenarios with random velocities
  (dotimes (scenario 100)
    (let ((total-hours 0))
      (dolist (task tasks)
        (let* ((orig-estimate (car task))
               ;; Use a proper random number between 0.1 and 0.9
               (velocity (+ 0.1 (* 0.8 (/ (float (random 1000)) 1000.0))))
               (time-spent (/ orig-estimate velocity)))
          (setq total-hours (+ total-hours time-spent))))
      (aset scenarios scenario total-hours)
      ;; Store debug info for the first 5 scenarios
      (when (< scenario 5)
        (push (format "Scenario %d: %.2f hours" scenario (aref scenarios scenario)) debug-info))))
  
  ;; Print debug info
  (princ "Debug Information:\n")
  (dolist (info (reverse debug-info))
    (princ (concat info "\n")))
  (princ "\n")
  
  ;; Convert to calendar dates
  (dotimes (i 100)
    (let* ((total-hours (aref scenarios i))
           ;; Calculate work days (ceiling to account for partial days)
           (work-days (ceiling (/ total-hours hours-per-day)))
           
           ;; Calculate calendar days accounting for weekends
           ;; For every 6 work days, add 2 weekend days (8 calendar days total)
           (full-weeks (/ work-days days-per-week))
           (remaining-work-days (% work-days days-per-week))
           (weekend-days (* full-weeks 2))  ;; 2 weekend days per week
           (total-days (+ work-days weekend-days))
           
           ;; Add days to today's date
           (completion-date (time-add today (days-to-time total-days))))
      
      ;; Store the result
      (push (cons (1+ i) completion-date) results)
      
      ;; Debug info for the first 5 scenarios
      (when (< i 5)
        (push (format "Scenario %d: %.2f hours, %d work days, %d calendar days, completion: %s" 
                     i total-hours work-days total-days
                     (format-time-string "%Y-%m-%d" completion-date)) 
              debug-info))))
  
  ;; Print more debug info
  (princ "Calendar Calculation Debug:\n")
  (dolist (info (reverse (cl-subseq debug-info 5)))
    (princ (concat info "\n")))
  (princ "\n")
  
  ;; Sort by completion date
  (setq results (sort results (lambda (a b) (time-less-p (cdr a) (cdr b)))))
  
  ;; Generate a table with key percentiles and original estimate
  (let ((percentiles '(10 25 50 75 90 95 99)))
    (princ "| Percentile | Completion Date | Notes |\n")
    (princ "|------------+----------------+-------|\n")
    ;; First show the original estimate
    (princ (format "| Original   | %s    | Based on original estimates |\n" 
                  (format-time-string "%Y-%m-%d" orig-completion-date)))
    (princ "|------------+----------------+-------|\n")
    ;; Then show the percentiles
    (dolist (p percentiles)
      (let* ((idx (1- p))
             (result (nth idx results))
             (date (format-time-string "%Y-%m-%d" (cdr result))))
        (princ (format "| %d%%         | %s    | Monte Carlo simulation |\n" p date)))))
  
  ;; Ensure time_track directory exists
  (unless (file-directory-p "time_track")
    (make-directory "time_track" t))
  
  ;; Create histogram data file
  (with-temp-file "time_track/completion-dates.dat"
    (let* ((dates (mapcar (lambda (result) (format-time-string "%Y-%m-%d" (cdr result))) results))
           (unique-dates (delete-dups (copy-sequence dates)))
           (date-counts (mapcar (lambda (date) 
                                (cons date (cl-count date dates :test 'string=))) 
                              unique-dates)))
      (dolist (date-count (sort date-counts (lambda (a b) (string< (car a) (car b)))))
        (insert (format "%s %d\n" (car date-count) (cdr date-count))))))
  
  ;; Create CDF data file
  (with-temp-file "time_track/completion-cdf.dat"
    (let ((cumulative 0))
      (dolist (result results)
        (setq cumulative (+ cumulative 1))
        (insert (format "%s %d\n" 
                       (format-time-string "%Y-%m-%d" (cdr result)) 
                       cumulative))))))
#+END_SRC

#+RESULTS: completion_percentiles
| Percentile | Completion Date | Notes |
|------------+----------------+-------|
| Original   | 2025-04-12     | Based on original estimates |
|------------+----------------+-------|
| 10%        | 2025-04-15     | Monte Carlo simulation |
| 25%        | 2025-04-22     | Monte Carlo simulation |
| 50%        | 2025-05-01     | Monte Carlo simulation |
| 75%        | 2025-05-12     | Monte Carlo simulation |
| 90%        | 2025-05-22     | Monte Carlo simulation |
| 95%        | 2025-05-29     | Monte Carlo simulation |
| 99%        | 2025-06-10     | Monte Carlo simulation |

** Completion Date Distribution
#+NAME: completion_histogram
#+BEGIN_SRC elisp :results file :file time_track/completion-histogram.png :var orig_date="2025-04-12"
(unless (file-directory-p "time_track")
  (make-directory "time_track" t))

(with-temp-file "time_track/plot-completion.gp"
  (insert "set terminal png size 800,400\n")
  (insert "set output 'completion-histogram.png'\n")  ;; Removed time_track/ prefix
  (insert "set title 'Project Completion Date Distribution'\n")
  (insert "set xlabel 'Completion Date'\n")
  (insert "set ylabel 'Frequency (% of scenarios)'\n")
  (insert "set xdata time\n")
  (insert "set timefmt '%Y-%m-%d'\n")
  (insert "set format x '%m/%d'\n")
  (insert "set xtics rotate by 45 right\n")
  (insert "set style fill solid 0.5\n")
  (insert "set grid ytics\n")
  (insert "set arrow from '2025-04-12',graph 0 to '2025-04-12',graph 1 nohead lc rgb 'red' lw 2 dt 2\n")
  (insert "plot 'completion-dates.dat' using 1:2 with boxes title 'Completion Scenarios', \\\n")
  (insert "     '-' using 1:2:3 with labels offset 0,1 textcolor rgb 'red' title '' \n")
  (insert "2025-04-12 1 \"Original Estimate\"\n")
  (insert "e\n"))

(let ((default-directory (expand-file-name "time_track")))
  (call-process "gnuplot" nil nil nil "plot-completion.gp"))

"time_track/completion-histogram.png"
#+END_SRC

** Cumulative Completion Probability
#+NAME: completion_cdf
#+BEGIN_SRC elisp :results file :file time_track/completion-cdf.png :var orig_date="2025-04-12"
(unless (file-directory-p "time_track")
  (make-directory "time_track" t))

(with-temp-file "time_track/plot-cdf.gp"
  (insert "set terminal png size 800,400\n")
  (insert "set output 'completion-cdf.png'\n")  ;; Removed time_track/ prefix
  (insert "set title 'Cumulative Probability of Project Completion'\n")
  (insert "set xlabel 'Date'\n")
  (insert "set ylabel 'Probability of Completion (%)'\n")
  (insert "set xdata time\n")
  (insert "set timefmt '%Y-%m-%d'\n")
  (insert "set format x '%m/%d'\n")
  (insert "set yrange [0:100]\n")
  (insert "set xtics rotate by 45 right\n")
  (insert "set grid\n")
  (insert "set arrow from '2025-04-12',graph 0 to '2025-04-12',graph 1 nohead lc rgb 'red' lw 2 dt 2\n")
  (insert "plot 'completion-cdf.dat' using 1:($2) with lines lw 2 title 'Completion Probability', \\\n")
  (insert "     '-' using 1:2:3 with labels offset 2,0 textcolor rgb 'red' title '' \n")
  (insert "2025-04-12 50 \"Original Estimate\"\n")
  (insert "e\n"))

(let ((default-directory (expand-file-name "time_track")))
  (call-process "gnuplot" nil nil nil "plot-cdf.gp"))

"time_track/completion-cdf.png"
#+END_SRC

** Interpretation

The Monte Carlo simulation results show:

- There is a 50% chance the project will be completed by May 1, 2025
- There is a 90% chance the project will be completed by May 22, 2025
- There is a 99% chance the project will be completed by June 10, 2025

These estimates assume:
1. You work 2.5 hours per day on this project
2. You work 6 days per week
3. Task velocities vary between 0.1 and 0.9 (slower than estimated)

As you complete tasks and update the "Spent" column in the tasks table, you can re-run this simulation to get updated completion date estimates.
